import sys
def construire():
    """
    Cette fonction récursive construit la liste 
    à partir des arguments fournis sur la ligne de commande.
    Elle retourne la liste construite.
    """
    global i  
    l = []          
    while True:
        if sys.argv[i]=="[":   
            i+=1               
            if i!=2:                  # pour la première liste, on ne fait rien
                l.append(construire()) 
        elif sys.argv[i]=="]":        # c'est la fin de la liste,
            i+=1
            return l                  # on renvoie la liste constuite
        else:                         # c'est une liste d'entiers
            l.append(int(sys.argv[i]))   
            i+=1
def mklist():
    global i
    l = []          # liste courante
    while True:
        if lline[i]=="[":   # c'est une liste de listes
            i+=1                 # argument suivant
            if i!=1:             # pour la première liste, on ne fait rien
                l.append(mklist())    # sinon on construit cette sous-liste et on la met dans la liste courante
        elif lline[i]=="]": # c'est la fin de la liste,
            i+=1
            return l             # on renvoie la liste courante
        else:                  # c'est une liste d'entiers
            l.append(int(lline[i]))   
            i+=1
def build(l0):
    """
    Cette fonction construit la liste correspondant à sa représentation chaine de caractère fourni en argument.
    """
    def _build():
        nonlocal i
        l = []          # sous-liste courante
        while True:
            if l0[i]=="[":   # c'est une sous-liste de listes
                i+=1                 
                if i!=1:             # pour la première sous-liste, on ne fait rien
                    l.append(_build())    # sinon on construit cette sous-liste et on la met dans la sous-liste courante
            elif l0[i]=="]": # c'est la fin de la sous-liste courante,
                i+=1
                return l             # on renvoie la sous-liste courante
            else:                  # c'est une sous-liste d'entiers
                l.append(int(l0[i]))   
                i+=1
    i = 0
    res = _build()
    return res



-----------------------------------------------------

#!/bin/env python3
import getlist
"""
    Soit L le type liste dont les éléments sont soit tous de type int, soit tous de type L.
    Par exemple, l = [ [1,2], [ [2,3,4], [5,4,3,2], [[3,1],[2]]], [0,9] ] est de type L.  
    Ce programme est appelé avec une liste de type L sur la ligne de commande,
    et sort le min des max de ses sous-listes.  
    Avec la liste l ci-dessus, la liste des max est [2, 4, 5, 3, 2, 9] donc le programme sort 2.
    La liste doit être fournie sous la forme : [ [ 1 2 ] [ [ 2 3 4 ] [ 5 4 3 2 ] [ [ 3 1 ] [ 2 ] ] ] [ 0 9 ] ]
"""

def minmax(l):
    """
    Cette fonction récursive retourne le minmax de la liste passée en argument.
    """
    if type(l[0])==int:
        maxi.append(max(l))
    else:
        for i in l:
            minmax(i)
if __name__=="__main__":
    # programme principal
    getlist.i = 1
    l = getlist.construire()                   # récupération de la liste
    maxi = []
    minmax(l)
    print(min(maxi))


----------------------------------------

#!/bin/env python3
import getlist, re
"""
    Soit L le type liste dont les éléments sont soit tous de type int, soit tous de type L.
    Ce programme lit des liste de type L sur l'entrée standard, au format
    [ [ 1 2 ] [ [ 2 3 4 ] [ 5 4 3 2 ] [ [ 3 1 ] [ 2 ] ] ] [ 0 9 ] ]
    et sort cette liste dans laquelle les sous-listes d'entiers sont triées.  
"""
def tri(l):
    """
    Cette fonction récursive tri la liste passée en argument.
    """
    if type(l[0])==int:
        l.sort()
    else:
        for i in l:
            tri(i)

if __name__=="__main__":
    # programme principal
    while True:
        line = input("? ").rstrip("\n").strip()
        if line=="":
            break
        getlist.lline = re.split(r' +',line.rstrip("\n"))
        getlist.i = 0
        l = getlist.mklist()                      # récupération de la liste
        tri(l)
        print(f"{l=}")


---------------------------------------

#!/bin/env python3
import getlist, re
def profondeur(l):
    """
    Cette fonction renvoie la profondeur de la liste passée en argument.
    """
    def _profondeur(l,p):
        nonlocal prof
        for i in l:
            if type(i)==int:
                if p>prof:
                    prof = p
            else:
                _profondeur(i,p+1)
    prof=float("-inf")
    _profondeur(l,1)
    return(prof)
if __name__=="__main__":
    # programme principal
    f = open("listes.txt", "r")
    for line in f:
        lline = re.split(r' +',line.rstrip("\n"))
        l = getlist.build(lline)                     
        print(f"{l=}")
        print(f"{profondeur(l)=}")


